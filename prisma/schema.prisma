// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

model User {
    id       String  @id @default(cuid())
    avatar   String?
    username String  @unique
    email    String  @unique
    password String
    role     Role    @default(USER)
    verified Boolean @default(false)

    refreshToken String @unique

    //  relations
    polls Poll[]
    votes Vote[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([refreshToken, username, email])
}

model Poll {
    id    String @id @default(cuid())
    title String

    options Option[]

    votingStartsAt DateTime? @default(now())
    votingEndsAt   DateTime?

    //  relations
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    votes Vote[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Option {
    id    String @id @default(cuid())
    title String

    //  relations
    Poll   Poll?   @relation(fields: [pollId], references: [id])
    pollId String?
    votes  Vote[]
}

model Vote {
    id String @id @default(cuid())

    Poll   Poll   @relation(fields: [pollId], references: [id])
    pollId String

    User   User   @relation(fields: [userId], references: [id])
    userId String

    option   Option @relation(fields: [optionId], references: [id])
    optionId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
